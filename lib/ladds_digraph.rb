require 'graph'
require 'map'

Ladds = Map.new

# S = Street, B = Border
def S(n1, n2); Ladds.street(n1, n2); end
def B(n1, n2); Ladds.border(n1, n2); end

  S  1, 12;   B  1,  2;   B  1, 11;
  S  2, 21;   B  2,  1;   B  2,  3;
  S  3,  8;   B  3,  2;   B  3,  4;
  S  4,  9;   B  4,  3;   B  4,  5;
  S  5, 10;   B  5,  4;   B  5,  6;
  S  6, 23;   B  6,  5;   B  6,  7;
  S  7, 30;   B  7,  6;   B  7, 13;
  S  8,  3;   S  8,  9;   S  8, 14;
  S  9,  4;   S  9,  8;   S  9, 10;   S  9, 15;
  S 10,  5;   S 10,  9;   S 10, 16;
  S 11, 12;   B 11,  1;   B 11, 20;   S 11, 32;
  S 12,  1;   S 12, 11;   S 12, 28;
  S 13, 34;   B 13,  7;   B 13, 24;
  S 14,  8;   S 14, 15;   S 14, 17;
  S 15,  9;   S 15, 14;   S 15, 16;   S 15, 18;
  S 16, 10;   S 16, 15;   S 16, 19;
  S 17, 14;   S 17, 18;   S 17, 21;   S 17, 25;
  S 18, 15;   S 18, 17;   S 18, 19;   S 18, 22;
  S 19, 16;   S 19, 18;   S 19, 23;   S 19, 26;
  S 20, 27;   B 20, 11;   B 20, 44;
  S 21,  2;   S 21, 17;   S 21, 28;   S 21, 36;
  S 22, 18;   S 22, 25;   S 22, 26;
  S 23,  6;   S 23, 19;   S 23, 30;   S 23, 36;
  S 24, 31;   B 24, 13;   B 24, 59;
  S 25, 17;   S 25, 22;   S 25, 29;
  S 26, 19;   S 26, 22;   S 26, 29;
  S 27, 20;   S 27, 34;   S 27, 45;
  S 28, 12;   S 28, 21;   S 28, 32;   S 28, 40;
  S 29, 25;   S 29, 26;   S 29, 36;
  S 30,  7;   S 30, 23;   S 30, 34;   S 30, 42;
  S 31, 24;   S 31, 35;   S 31, 58;   S 32, 11;
  S 32, 28;   S 32, 34;   S 32, 50;   S 34, 13;
  S 34, 30;   S 34, 35;   S 34, 53;
  S 34, 27;   S 34, 32;   S 34, 37;   S 34, 46;
  S 35, 31;   S 35, 34;   S 35, 38;   S 35, 57;
  S 36, 21;   S 36, 23;   S 36, 29;   S 36, 41;
  S 37, 34;   S 37, 39;   S 37, 47;
  S 38, 35;   S 38, 43;   S 38, 56;
  S 39, 37;   S 39, 48;   S 39, 49;
  S 40, 28;   S 40, 41;   S 40, 51;
  S 41, 36;   S 41, 40;   S 41, 42;
  S 42, 30;   S 42, 41;   S 42, 52;
  S 43, 38;   S 43, 54;   S 43, 55;
  S 44, 45;   B 44, 20;   B 44, 81;
  S 45, 27;   S 45, 44;   S 45, 46;   S 45, 73;
  S 46, 34;   S 46, 45;   S 46, 47;   S 46, 68;
  S 47, 37;   S 47, 46;   S 47, 48;   S 47, 65;
  S 48, 39;   S 48, 47;   S 48, 60;
  S 49, 39;   S 49, 50;   S 49, 60;
  S 50, 32;   S 50, 49;   S 50, 51;   S 50, 70;
  S 51, 40;   S 51, 50;   S 51, 61;
  S 52, 42;   S 52, 53;   S 52, 62;
  S 53, 34;   S 53, 52;   S 53, 54;   S 53, 72;
  S 54, 43;   S 54, 53;   S 54, 63;
  S 55, 43;   S 55, 56;   S 55, 63;
  S 56, 38;   S 56, 55;   S 56, 57;   S 56, 66;
  S 57, 35;   S 57, 56;   S 57, 58;   S 57, 69;
  S 58, 31;   S 58, 57;   S 58, 59;   S 58, 76;
  S 59, 58;   B 59, 24;   B 59, 83;
  S 60, 48;   S 60, 49;   S 60, 65;
  S 61, 51;   S 61, 64;   S 61, 74;
  S 62, 52;   S 62, 64;   S 62, 75;
  S 63, 54;   S 63, 55;   S 63, 66;
  S 64, 61;   S 64, 62;   S 64, 67;
  S 65, 47;   S 65, 60;   S 65, 68;
  S 66, 56;   S 66, 63;   S 66, 69;
  S 67, 64;   S 67, 71;   S 67, 79;   S 67, 80;
  S 68, 46;   S 68, 65;   S 68, 70;   S 68, 73;
  S 69, 57;   S 69, 66;   S 69, 72;   S 69, 76;
  S 70, 50;   S 70, 68;   S 70, 74;   S 70, 87;
  S 71, 67;   S 71, 77;   S 71, 78;
  S 72, 53;   S 72, 69;   S 72, 75;   S 72, 91;
  S 73, 45;   S 73, 68;   S 73, 81;
  S 74, 61;   S 74, 70;   S 74, 79;   S 74, 94;
  S 75, 62;   S 75, 72;   S 75, 80;   S 75, 99;
  S 76, 58;   S 76, 69;   S 76, 83;   S 77, 71;
  S 77, 82;   S 77, 84;
  S 78, 71;   S 78, 82;   S 78, 86;
  S 79, 67;   S 79, 74;   S 79, 84;
  S 80, 67;   S 80, 75;   S 80, 86;   S 80, 98;
  S 81, 73;   B 81, 44;   B 81, 87;
  S 82, 77;   S 82, 78;   S 82, 85;
  S 83, 76;   B 83, 59;   B 83, 91;
  S 84, 77;   S 84, 79;   S 84, 85;   S 84, 88;
  S 85, 82;   S 85, 84;   S 85, 86;   S 85, 89;
  S 86, 78;   S 86, 80;   S 86, 85;   S 86, 90;
  S 87, 70;   B 87, 81;   B 87, 94;
  S 88, 84;   S 88, 89;   S 88, 92;
  S 89, 85;   S 89, 88;   S 89, 90;   S 89, 93;
  S 90, 86;   S 90, 89;   S 90, 97;
  S 91, 72;   B 91, 83;   B 91, 99;
  S 92, 88;   S 92, 93;   S 92, 95;
  S 93, 89;   S 93, 92;   S 93, 96;
  S 94, 74;   B 94, 87;   B 94, 95;
  S 95, 92;   B 95, 94;   B 95, 96;
  S 96, 93;   B 96, 95;   B 96, 97;
  S 97, 90;   B 97, 96;   B 97, 98;
  S 98, 80;   B 98, 97;   B 98, 99;
  S 99, 75;   B 99, 91;   B 99, 98;

# Graph::Edge.send(:define_method, :foo) do
#   return if n2 < n1
#   f = points == 1 ? 'S' : 'B'
#   "#{f}  #{n1}, #{n2}"
# end
# puts Ladds.streets.map(&:foo).compact.join("\n")
